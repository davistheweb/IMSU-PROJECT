import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;



public class SchoolRegistration extends javax.swing.JFrame {

    /**
     * Creates new form SchoolRegistration
     */
    public SchoolRegistration() {
        initComponents();
        showTables();
    }
    public ArrayList<RegisteredStudents> studentsList(){
         ArrayList<RegisteredStudents> RegisteredStudentList = new ArrayList();
         String url = "jdbc:MySql://localhost:3306/govt_school";
          String username = "root";
          String password = "";
          try{
            Connection conn = DriverManager.getConnection(url,username,password);
            //PreparedStatement pstm = conn.prepareStatement(statement);
            String query2 = "SELECT * FROM school_registration";
            Statement st = conn.createStatement();
            ResultSet rst = st.executeQuery(query2);
            RegisteredStudents RegisteredStudentS;
            while(rst.next()){{
                RegisteredStudentS = new RegisteredStudents(rst.getInt("id"), rst.getInt("age"),  rst.getString("regNum"), rst.getString("Name"),rst.getString("dob"),rst.getString("nationality"),rst.getString("date_on_entry"),rst.getString("class_on_entry"),rst.getString("state"),rst.getString("gender"),rst.getString("date_on_leaving"),rst.getString("last_class_completed"));
                RegisteredStudentList.add(RegisteredStudentS);
            }}
          
          }
          catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Message, (Service Provider is unAvaliable)", JOptionPane.WARNING_MESSAGE);
            
        }
          return RegisteredStudentList;
    }
    
    public void showTables(){
        ArrayList<RegisteredStudents> table = studentsList();
        DefaultTableModel model = (DefaultTableModel)displayUserInTable.getModel();
        Object[] row =  new Object[12];
        for(int i = 0; i<table.size();  i++){
            row[0] = table.get(i).getid();
            row[1] = table.get(i).getregNum();
            row[2] = table.get(i).getName();
            row[3] = table.get(i).getdob();
            row[4] = table.get(i).getnationality();
            row[5] = table.get(i).getdate_on_entry();
            row[6] = table.get(i).getclass_on_entry();
            row[7] = table.get(i).getage();
            row[8] = table.get(i).getstate();
            row[9] = table.get(i).getgender();
            row[10] = table.get(i).getdate_on_leaving();
            row[11] = table.get(i).getlast_class_completed();
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        regNum = new javax.swing.JTextField();
        studentName = new javax.swing.JTextField();
        dob = new javax.swing.JTextField();
        country = new javax.swing.JTextField();
        dateOnEntry = new javax.swing.JTextField();
        levelOnEntry = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        state = new javax.swing.JComboBox<>();
        gender = new javax.swing.JComboBox<>();
        dateOnLeaving = new javax.swing.JTextField();
        levelLastCompleted = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayUserInTable = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel1.setText("IMO STATE UNIVERSITY, OWERRI.");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel2.setText("REG. NUMBER");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel3.setText("NAME");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel4.setText("DATE OF BIRTH");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel5.setText("NATIONALITY");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel6.setText("Date On Entry");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel7.setText("Level On Entry");

        SaveButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SaveButton.setText("SAVE");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        UpdateButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        UpdateButton.setText("UPDATE");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setText("SELECT");
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        levelOnEntry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT LEVEL", "100 LEVEL", "200 LEVEL", "300 LEVEL", "400 LEVEL", "500 LEVEL ", "600 LEVEL", " " }));
        levelOnEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                levelOnEntryActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel8.setText("AGE");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel9.setText("STATE OF ORIGIN");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel10.setText("GENDER");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel11.setText("Date On Leaving");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel12.setText("Level Last Completed");

        age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageActionPerformed(evt);
            }
        });

        state.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT STATE", "ABIA", "ADAMAWA", "AKWA-IBOM", "ANAMBRA", "BAUCHI", "BAYELSA", "BENUE", "BORNO", "CROSS-RIVER", "DELTA", "EBONYI", "EDO", "EKITI", "ENUGU", "GOMBE", "IMO", "JIGAWA", "KADUNA", "KASTINA", "KEBBI", "KOGI", "KWARA", "LAGOS", "NASSARAWA", "NIGER", "OGUN", "OSUN", "OYO", "PLATEAU", "RIVERS", "SOKOTO", "TARABA", "ZAMFARA", "F.C.T" }));
        state.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateActionPerformed(evt);
            }
        });

        gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "MALE", "FEMALE", "CHOOSE NOT TO SAY" }));
        gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderActionPerformed(evt);
            }
        });

        levelLastCompleted.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT LEVEL", "100 LEVEL", "200 LEVEL", "300 LEVEL", "400 LEVEL", "500 LEVEL", "600 LEVEL" }));
        levelLastCompleted.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                levelLastCompletedKeyTyped(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                                .addGap(62, 62, 62)
                                .addComponent(dateOnEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(213, 213, 213)
                                .addComponent(jButton3))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(SaveButton)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(country, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                .addComponent(dob)
                                .addComponent(UpdateButton)
                                .addComponent(regNum)
                                .addComponent(studentName))
                            .addComponent(levelOnEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(190, 190, 190)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(105, 105, 105)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(state, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(age)
                        .addComponent(gender, 0, 1, Short.MAX_VALUE)
                        .addComponent(dateOnLeaving)
                        .addComponent(levelLastCompleted, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 606, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                                .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3)
                                    .addComponent(regNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE))
                            .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dateOnLeaving, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(dateOnEntry, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(levelOnEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(levelLastCompleted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveButton)
                    .addComponent(UpdateButton)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        displayUserInTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "REG.Number", "Name", "DateOfBirth", "Nationality", "Date On Entry", "Level On Entry", "Age", "State", "Gender", "Date On leaving", "Last Class Completed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayUserInTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayUserInTableMouseClicked(evt);
            }
        });
        displayUserInTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                displayUserInTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(displayUserInTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void upLoadDetails() {
    // Check for empty fields
    if ("".equals(regNum.getText()) || "".equals(studentName.getText()) || "".equals(dob.getText()) || "".equals(country.getText()) || "".equals(dateOnEntry.getText()) || "".equals(dateOnLeaving.getText())) {
        JOptionPane.showMessageDialog(this, "FIELD CANNOT BE EMPTY!!", "Please Fill Empty Field", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if("SELECT LEVEL".equals(levelOnEntry.getSelectedItem().toString())){
        JOptionPane.showMessageDialog(this, "PLEASE SELECT LAST LEVEL ON ENTRY", "INVALID LEVEL", JOptionPane.WARNING_MESSAGE);
        return;
    }
     if("SELECT LEVEL".equals(levelLastCompleted.getSelectedItem().toString())){
        JOptionPane.showMessageDialog(this, "PLEASE SELECT LAST LEVEL COMPLETED", "INVALID LEVEL", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if("Choose".equals(gender.getSelectedItem().toString())){
        JOptionPane.showMessageDialog(this, "PLEASE SELECT GENDER", "INVALID GENDER", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if("SELECT STATE".equals(state.getSelectedItem().toString())){
        JOptionPane.showMessageDialog(this, "PLEASE SELECT STATE", "INVALID STATE", JOptionPane.WARNING_MESSAGE);
        return;
    }
    String url = "jdbc:mysql://localhost:3306/govt_school";
    String username = "root";
    String password = "";
    String regNumValue = regNum.getText().toUpperCase();
    
   
    String checkStatement = "SELECT * FROM school_registration WHERE regNum = ?";
    String insertStatement = "INSERT INTO school_registration(regNum, Name, dob, nationality, date_on_entry, class_on_entry, age, state, gender, date_on_leaving, last_class_completed) VALUES(?,?,?,?,?,?,?,?,?,?,?)";
    
    try (Connection conn = DriverManager.getConnection(url, username, password)) {
        // Check for duplicate registration number
        try (PreparedStatement checkPstm = conn.prepareStatement(checkStatement)) {
            checkPstm.setString(1, regNumValue);
            try (ResultSet rs = checkPstm.executeQuery()) {
                if (rs.next() && rs.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(this, "Registration number already exists!", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }
        
        // Insert the new record if no duplicate found
        try (PreparedStatement insertPstm = conn.prepareStatement(insertStatement)) {
            insertPstm.setString(1, regNumValue);
            insertPstm.setString(2, studentName.getText().toUpperCase());
            insertPstm.setString(3, dob.getText());
            insertPstm.setString(4, country.getText());
            insertPstm.setString(5, dateOnEntry.getText());
            insertPstm.setString(6, levelOnEntry.getSelectedItem().toString());
            int studentAge = Integer.parseInt(age.getText());
            insertPstm.setInt(7, studentAge);
            insertPstm.setString(8, state.getSelectedItem().toString());
            insertPstm.setString(9, gender.getSelectedItem().toString());
            insertPstm.setString(10, dateOnLeaving.getText());
            insertPstm.setString(11, levelLastCompleted.getSelectedItem().toString());
            
            int statementReport = insertPstm.executeUpdate();
            
            if (statementReport > 0) {
                JOptionPane.showMessageDialog(this, "Inserted Successfully", "Completed", JOptionPane.INFORMATION_MESSAGE);
            }
            
            DefaultTableModel model = (DefaultTableModel) displayUserInTable.getModel();
            model.setRowCount(0);
            showTables();
        }
        
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Message", JOptionPane.WARNING_MESSAGE);
    }
}

    void fetchDetailsByRegNum() {
    String url = "jdbc:MySql://localhost:3306/govt_school";
    String username = "root";
    String password = "";
    
    String query = "SELECT * FROM school_registration WHERE regNum = ?";
    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement pstm = conn.prepareStatement(query)) {
         
        pstm.setString(1, regNum.getText().toUpperCase());
        ResultSet rs = pstm.executeQuery();

        if (rs.next()) {
            // Assuming rs.getX() methods match the data types and columns in your table
            studentName.setText(rs.getString("Name"));
            dob.setText(rs.getString("dob"));
            country.setText(rs.getString("nationality"));
            dateOnEntry.setText(rs.getString("date_on_entry"));
            levelOnEntry.setSelectedItem(rs.getString("class_on_entry"));
            age.setText(String.valueOf(rs.getInt("age")));
            state.setSelectedItem(rs.getString("state"));
            gender.setSelectedItem(rs.getString("gender"));
            dateOnLeaving.setText(rs.getString("date_on_leaving"));
            levelLastCompleted.setSelectedItem(rs.getString("last_class_completed"));
        } else {
            JOptionPane.showMessageDialog(this, "No record found with regNum: " + regNum.getText(), "Error", JOptionPane.WARNING_MESSAGE);
        }
        
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Message", JOptionPane.WARNING_MESSAGE);
    }
}
    private void stateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stateActionPerformed

    private void ageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageActionPerformed

    private void levelOnEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_levelOnEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_levelOnEntryActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
            upLoadDetails();
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveButtonActionPerformed
    void DeleteTableContent() {
        String url = "jdbc:MySql://localhost:3306/govt_school";
        String username = "root";
        String password = "";
        try{
            Connection conn = DriverManager.getConnection(url,username,password);
            int row = displayUserInTable.getSelectedRow();
            String val = (displayUserInTable.getModel().getValueAt(row, 0).toString());
            String sqlQuery = "DELETE FROM school_registration WHERE id="+val;
            PreparedStatement pstm = conn.prepareStatement(sqlQuery); 
            pstm.executeUpdate();
            DefaultTableModel model = (DefaultTableModel)displayUserInTable.getModel();
            model.setRowCount(0);
            showTables();
            JOptionPane.showMessageDialog(this, "Deleted Successfully", "Success Message", JOptionPane.WARNING_MESSAGE);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Message", JOptionPane.WARNING_MESSAGE);
            
        }
    
    }
    void UpdateTableContent(){
        String url = "jdbc:MySql://localhost:3306/govt_school";
        String username = "root";
        String password = "";
        try{
            Connection conn = DriverManager.getConnection(url,username,password);
            
            int row = displayUserInTable.getSelectedRow();
            String value = (displayUserInTable.getModel().getValueAt(row, 0).toString());
            String query = "UPDATE school_registration SET regNum=?, Name=?, dob=?, nationality=?, date_on_entry=?, class_on_entry=?, age=?, state=?, gender=?, date_on_leaving=?, last_class_completed=? where id = "+value;
            PreparedStatement pstm = conn.prepareStatement(query);
            pstm.setString(1,regNum.getText());
            pstm.setString(2, studentName.getText().toUpperCase());
            pstm.setString(3, dob.getText());
            pstm.setString(4, country.getText());
            pstm.setString(5, dateOnEntry.getText());
            String LevelOnEntry = levelOnEntry.getSelectedItem().toString();
            
            pstm.setString (6,LevelOnEntry );
            int studentAge = Integer.parseInt(age.getText());
            pstm.setInt(7,studentAge);
            String State = state.getSelectedItem().toString();
            pstm.setString(8, State);
            String Gender = gender.getSelectedItem().toString();
            pstm.setString(9, Gender);
            pstm.setString(10, dateOnLeaving.getText());
            String LevelLastCompleted = levelLastCompleted.getSelectedItem().toString();
            pstm.setString(11, LevelLastCompleted);
            
            int statementReport = pstm.executeUpdate();
            DefaultTableModel model = (DefaultTableModel)displayUserInTable.getModel();
            model.setRowCount(0);
            showTables();
                    
            
            if(statementReport> 0){
                JOptionPane.showMessageDialog(this, "Updated Successfully", "Completed", JOptionPane.INFORMATION_MESSAGE);
            }
            
            
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Message", JOptionPane.WARNING_MESSAGE);
            
        }
    }
    void DisplayTableContentInComponent(){
        int i = displayUserInTable.getSelectedRow();
        TableModel tableModel = displayUserInTable.getModel();
        regNum.setText(tableModel.getValueAt(i,1).toString());
        studentName.setText(tableModel.getValueAt(i,2).toString());
        dob.setText(tableModel.getValueAt(i,3).toString());
        country.setText(tableModel.getValueAt(i,4).toString());
        dateOnEntry.setText(tableModel.getValueAt(i,5).toString());
        String LevelOnEntry = tableModel.getValueAt(i,6).toString();
        
        
        switch(LevelOnEntry){
            case "100 LEVEL" -> levelOnEntry.setSelectedIndex(0);
                case "200 LEVEL" -> levelOnEntry.setSelectedIndex(1);
                case "300 LEVEL" -> levelOnEntry.setSelectedIndex(2);
                case "400 LEVEL" -> levelOnEntry.setSelectedIndex(3);
                case "500 LEVEL" -> levelOnEntry.setSelectedIndex(4);
                case "600 LEVEL" -> levelOnEntry.setSelectedIndex(5);
        }
        age.setText(tableModel.getValueAt(i,7).toString());
        String studentState = tableModel.getValueAt(i,8).toString();
        switch (studentState) {
        case "ABIA" -> state.setSelectedIndex(0);
        case "ADAMAWA" -> state.setSelectedIndex(1);
        case "AKWA-IBOM" -> state.setSelectedIndex(2);
        case "ANAMBRA" -> state.setSelectedIndex(3);
        case "BAUCHI" -> state.setSelectedIndex(4);
        case "BAYELSA" -> state.setSelectedIndex(5);
        case "BENUE" -> state.setSelectedIndex(6);
        case "BORNO" -> state.setSelectedIndex(7);
        case "CROSS-RIVER" -> state.setSelectedIndex(8);
        case "DELTA" -> state.setSelectedIndex(9);
        case "EBONYI" -> state.setSelectedIndex(10);
        case "EDO" -> state.setSelectedIndex(11);
        case "EKITI" -> state.setSelectedIndex(12);
        case "ENUGU" -> state.setSelectedIndex(13);
        case "GOMBE" -> state.setSelectedIndex(14);
        case "IMO" -> state.setSelectedIndex(15);
        case "JIGAWA" -> state.setSelectedIndex(16);
        case "KADUNA" -> state.setSelectedIndex(17);
        case "KASTINA" -> state.setSelectedIndex(18);
        case "KEBBI" -> state.setSelectedIndex(19);
        case "KOGI" -> state.setSelectedIndex(20);
        case "KWARA" -> state.setSelectedIndex(21);
        case "LAGOS" -> state.setSelectedIndex(22);
        case "NASSARAWA" -> state.setSelectedIndex(23);
        case "NIGER" -> state.setSelectedIndex(24);
        case "OGUN" -> state.setSelectedIndex(25);
        case "OSUN" -> state.setSelectedIndex(26);
        case "OYO" -> state.setSelectedIndex(27);
        case "PLATEAU" -> state.setSelectedIndex(28);
        case "RIVERS" -> state.setSelectedIndex(29);
        case "SOKOTO" -> state.setSelectedIndex(30);
        case "TARABA" -> state.setSelectedIndex(31);
        case "ZAMFARA" -> state.setSelectedIndex(32);
        case "F.C.T" -> state.setSelectedIndex(33);
        
    }
        String studentGender =  tableModel.getValueAt(i,9).toString();
        
         switch(studentGender){
            case "MALE" -> gender.setSelectedIndex(0);
                case "FEMALE" -> gender.setSelectedIndex(1);
                case "CHOOSE NOT TO SAY" -> gender.setSelectedIndex(2);
         }
        dateOnLeaving.setText(tableModel.getValueAt(i,10).toString());
        
        String LastLevelCompleted = tableModel.getValueAt(i,11).toString();
          switch(LastLevelCompleted){
            case "100 LEVEL" -> levelLastCompleted.setSelectedIndex(0);
                case "200 LEVEL" -> levelLastCompleted.setSelectedIndex(1);
                case "300 LEVEL" -> levelLastCompleted.setSelectedIndex(2);
                case "400 LEVEL" -> levelLastCompleted.setSelectedIndex(3);
                case "500 LEVEL" -> levelLastCompleted.setSelectedIndex(4);
                case "600 LEVEL" -> levelLastCompleted.setSelectedIndex(5);
        }
    }
    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        UpdateTableContent();
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        fetchDetailsByRegNum();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        DeleteTableContent();
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    private void displayUserInTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayUserInTableMouseClicked
      DisplayTableContentInComponent();  
        // TODO add your handling code here:
    }//GEN-LAST:event_displayUserInTableMouseClicked

    private void displayUserInTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_displayUserInTableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayUserInTableKeyPressed

    private void levelLastCompletedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_levelLastCompletedKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_levelLastCompletedKeyTyped

    private void genderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SchoolRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SchoolRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SchoolRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SchoolRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SchoolRegistration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JTextField age;
    private javax.swing.JTextField country;
    private javax.swing.JTextField dateOnEntry;
    private javax.swing.JTextField dateOnLeaving;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable displayUserInTable;
    private javax.swing.JTextField dob;
    private javax.swing.JComboBox<String> gender;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> levelLastCompleted;
    private javax.swing.JComboBox<String> levelOnEntry;
    private javax.swing.JTextField regNum;
    private javax.swing.JComboBox<String> state;
    private javax.swing.JTextField studentName;
    // End of variables declaration//GEN-END:variables
}


/* import java.util.HashMap;
import java.util.Map;

Map<String, Integer> stateIndexMap = new HashMap<>();
stateIndexMap.put("ABIA", 0);
stateIndexMap.put("ADAMAWA", 1);
stateIndexMap.put("AKWA-IBOM", 2);
stateIndexMap.put("ANAMBRA", 3);
stateIndexMap.put("BAUCHI", 4);
stateIndexMap.put("BAYELSA", 5);
stateIndexMap.put("BENUE", 6);
stateIndexMap.put("BORNO", 7);
stateIndexMap.put("CROSS-RIVER", 8);
stateIndexMap.put("DELTA", 9);
stateIndexMap.put("EBONYI", 10);
stateIndexMap.put("EDO", 11);
stateIndexMap.put("EKITI", 12);
stateIndexMap.put("ENUGU", 13);
stateIndexMap.put("GOMBE", 14);
stateIndexMap.put("IMO", 15);
stateIndexMap.put("JIGAWA", 16);
stateIndexMap.put("KADUNA", 17);
stateIndexMap.put("KASTINA", 18);
stateIndexMap.put("KEBBI", 19);
stateIndexMap.put("KOGI", 20);
stateIndexMap.put("KWARA", 21);
stateIndexMap.put("LAGOS", 22);
stateIndexMap.put("NASSARAWA", 23);
stateIndexMap.put("NIGER", 24);
stateIndexMap.put("OGUN", 25);
stateIndexMap.put("OSUN", 26);
stateIndexMap.put("OYO", 27);
stateIndexMap.put("PLATEAU", 28);
stateIndexMap.put("RIVERS", 29);
stateIndexMap.put("SOKOTO", 30);
stateIndexMap.put("TARABA", 31);
stateIndexMap.put("ZAMFARA", 32);
stateIndexMap.put("F.C.T", 33);

String studentState = tableModel.getValueAt(i, 8).toString();
Integer index = stateIndexMap.get(studentState);
if (index != null) {
    state.setSelectedIndex(index);
} else {
    // Handle case where the state is not found in the map
    // e.g., state.setSelectedIndex(-1);
}
 */